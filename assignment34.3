Problem Statement:

Explain in brief with their uses.

● Oozie Action and Decision Nodes
Action Node
An action node represents a workflow task, e.g., moving files into HDFS, running a MapReduce, Pig or Hive jobs, importing data
using Sqoop or running a shell script of a program written in Java.

Decision Node
We can add decision tags to check if we want to run an action based on the output of decision. In the above example, 
if we already have the hive table we won’t need to create it again. In such a scenario, we can add a decision tag to not run 
the Create Table steps if the table already exists.
The behavior of a decision node can be seen as a switch-case statement.
A decision node consists of a list of predicates-transition pairs plus a default transition. 
Predicates are evaluated in order or appearance until one of them evaluates to true and the corresponding transition is taken. 
If none of the predicates evaluates to true the default transition is taken.

● Oozie Workflow Nodes
Work flow nodes can contain two types of nodes: 
1.control nodes 
2.action nodes. 

1.Control Nodes
	 Control nodes, which are used to define job chronology, provide the rules for beginning and ending a workflow and control the 
   workflow execution path with possible decision points known as fork and join nodes. 
	Control node achieves this by using 3 nodes
1. Start Control Node
2. End Control Node
3.Kill control Node
4.Decision Control Node
5. Fork and Join Control Nodes


1. Start Control Node
	The start node is the entry point for a workflow job, it indicates the first workflow node the workflow job must transition to.
When a workflow is started, it automatically transitions to the node specified in the start .
A workflow definition must have one start node.
Syntax:
<workflow-app name="[WF-DEF-NAME]" xmlns="uri:oozie:workflow:0.1">
  ...
  <start to="[NODE-NAME]"/>
  ...
</workflow-app>
The to attribute is the name of first workflow node to execute.

2. Kill control Node
The kill node allows a workflow job to kill itself.
When a workflow job reaches the kill it finishes in error (KILLED).
If one or more actions started by the workflow job are executing when the kill node is reached, the actions will be killed.
A workflow definition may have zero or more kill nodes.
Syntax:
<workflow-app name="[WF-DEF-NAME]" xmlns="uri:oozie:workflow:0.1">
    ...
    <kill name="[NODE-NAME]">
        <message>[MESSAGE-TO-LOG]</message>
    </kill>
    ...
</workflow-app>
The name attribute in the kill node is the name of the Kill action node.
The content of the message element will be logged as the kill reason for the workflow job.
A kill node does not have transition elements because it ends the workflow job, as KILLED .

3. End Control Node
The end node is the end for a workflow job, it indicates that the workflow job has completed successfully.
When a workflow job reaches the end it finishes successfully (SUCCEEDED).
If one or more actions started by the workflow job are executing when the end node is reached, the actions will be killed. 
In this scenario the workflow job is still considered as successfully run.
A workflow definition must have one end node.
Syntax:
<workflow-app name="[WF-DEF-NAME]" xmlns="uri:oozie:workflow:0.1">
    ...
    <end name="[NODE-NAME]"/>
    ...
</workflow-app>
The name attribute is the name of the transition to do to end the workflow job.

4.  Decision Control Node
A decision node enables a workflow to make a selection on the execution path to follow.
The behavior of a decision node can be seen as a switch-case statement.
A decision node consists of a list of predicates-transition pairs plus a default transition. Predicates are evaluated in order 
or appearance until one of them evaluates to true and the corresponding transition is taken. If none of the predicates evaluates 
to true the default transition is taken.
The name attribute in the decision node is the name of the decision node.
Each case elements contains a predicate an a transition name. The predicate ELs are evaluated in order until one returns true 
and the corresponding transition is taken.
The default element indicates the transition to take if none of the predicates evaluates to true .
All decision nodes must have a default element to avoid bringing the workflow into an error state if none of the predicates evaluates to true.

● Fork and Join
A fork node splits one path of execution into multiple concurrent paths of execution.
A join node waits until every concurrent execution path of a previous fork node arrives to it.
The fork and join nodes must be used in pairs. The join node assumes concurrent execution paths are children of the same fork node.
Syntax:
<workflow-app name="[WF-DEF-NAME]" xmlns="uri:oozie:workflow:0.1">
    ...
    <fork name="[FORK-NODE-NAME]">
        <path start="[NODE-NAME]" />
        ...
        <path start="[NODE-NAME]" />
    </fork>
    ...
    <join name="[JOIN-NODE-NAME]" to="[NODE-NAME]" />
    ...
</workflow-app>
The name attribute in the fork node is the name of the workflow fork node. The start attribute in the path elements in the fork node
indicate the name of the workflow node that will be part of the concurrent execution paths.
The name attribute in the join node is the name of the workflow join node. The to attribute in the join node indicates the name of 
the workflow node that will executed after all concurrent execution paths of the corresponding fork arrive to the join node.

● Oozie Web Console
Oozie provides a read-only Web based console that allows to allow to monitor Oozie system status, workflow applications status and workflow jobs status.
The Web base console is implemented as a client of the Web Services API. 
